<?php

/**
 * Implements hook_help().
 */
function tagcloudss_help($path, $arg) {
  switch ($path) {
    case 'admin/help#tagcloudss':
      return t('Tagclouds offers dynamic urls. <br/>Visit example.com/tagclouds/list/2,1,5 to get the vocabularies 2,1 and 5 listed as tag groups. <br/>Visit example.com/tagclouds/chunk/2,1,5 to get a tag cloud of the terms in the vocabularies 2,1 and 5.<br/> Note that we limit to five vocabularies.');
  }
}

/**
 * Implements hook_page_build().
 */
function tagclouds_page_build(&$page) {
  $path = drupal_get_path('module', 'tagclouds');
  $page['#attached']['css'][$path . '/tagclouds.css'] = array('every_page' => TRUE);
}

/**
 * Implements hook_menu_link_defaults().
 */
function tagclouds_menu_link_defaults() {
  $links['tagclouds.admin.tagclouds'] = array(
    'link_title'  => 'TagClouds configuration',
    'description' => 'Configure the tag clouds. Set the order, the number of tags, and the depth of the clouds.',
    'route_name'  => 'tagclouds.admin_page',
  );
  $links['tagclouds.page.chunk'] = array(
    'link_title' => 'Tags',
    'route_name'  => 'tagclouds.page_chunk',
    'type' => MENU_SUGGESTED_ITEM,
  );
  $links['tagclouds.list.vocs'] = array(
    'link_title' => 'Tags',
    'route_name'  => 'tagclouds.list_vocs',
    'type' => MENU_CALLBACK,
  );
  $links['tagclouds.chunk.vocs'] = array(
    'link_title' => 'Tags',
    'route_name'  => 'tagclouds.chunk_vocs',
    'type' => MENU_SUGGESTED_ITEM,
  );

  return $links;
}

/**
 * Function that gets the information from the database, passes it along to the
 * weight builder and returns these weighted tags. Note that the tags are
 * unordered at this stage, hence they need ordering either by calling our api
 * or by your own ordering data.
 *
 * @param $vids
 *   Vocabulary ids representing the vocabularies where you want the tags from.
 * @param $steps
 *   The amount of tag-sizes you will be using. If you give "12" you still get
 *   six different "weights". Defaults to 6 and is optional.
 * @param $size
 *   The number of tags that will be returned.
 * @param $display OPTIONAL
 *   The type of display "style"=weighted,"count"=numbered display
 *
 * @return
 *   An <em>unordered</em> array with tags-objects, containing the attribute
 *   $tag->weight.
 */
function tagclouds_get_tags($vids, $steps = 6, $size = 60, $display = NULL) {

  // Build the options so we can cache multiple versions.
  $language = \Drupal::languageManager()->getCurrentLanguage();
  $options = implode('_', $vids) . '_' . $language->getName() . '_' . $steps . '_' . $size . "_" . $display;
  // Check if the cache exists.
  $cache_name = 'tagclouds_cache_' . $options;
  $cache = \Drupal::cache('data')->get($cache_name);

  $tags = array();
  // Make sure cache has data.
  if (!empty($cache->data)) {
    $tags = $cache->data;
  }
  else {

    if (!is_array($vids) || count($vids) == 0) {
      return array();
    }
    $config = \Drupal::config('tagclouds.admin_page');

    $query = db_select('taxonomy_term_data', 'td');
    $query->addExpression('COUNT(td.tid)', 'count');
    $query->fields('tfd',array('name', 'description__value'));
    $query->fields('td',array('tid', 'vid'));
    $query->fields('tn',array('nid'));
    
    $query->join('taxonomy_index', 'tn', 'td.tid = tn.tid');
    $query->join('node_field_data', 'n', 'tn.nid = n.nid');
    $query->join('taxonomy_term_field_data', 'tfd', 'tfd.tid = tn.tid');
    
    if ($config->get('tagclouds_language_separation')) $query->condition('n.language', $language->language);
    
    $query->condition('td.vid', $vids);
    $query->condition('n.status', 1);
    
    $query->groupBy('td.tid')->groupBy('td.vid')->groupBy('tfd.name');
    $query->groupBy('tfd.description__value')->groupBy('tn.nid');
    
    $query->having('COUNT(td.tid)>0');
    $query->orderBy('count', 'DESC');
    
    if ($size > 0) $query->range(0, $size);
    $result = $query->execute()->fetchAll();

    foreach ($result as $tag) {
      $tags[$tag->tid] = $tag;
    }
    if ($display == NULL) $display = $config->get('tagclouds_display_type');
    $tags = tagclouds_build_weighted_tags($tags, $steps);

    \Drupal::cache('data')->set($cache_name, $tags);
  }

  return $tags;
}

/**
 * API that returns an array with weighted tags.
 *
 * This is the hard part. People with better ideas are very very welcome to send
 * these to ber@webschuur.com. Distribution is one thing that needs attention.
 *
 * @param $tags
 *   A list of <em>objects</em> with the following attributes: $tag->count,
 *   $tag->tid, $tag->name and $tag->vid. Each Tag will be calculated and
 *   turned into a tag. Refer to tagclouds_get__tags() for an example.
 * @param $steps
 *   The amount of tag-sizes you will be using. If you give "12" you still get
 *   six different "weights". Defaults to 6 and is optional.
 * @return
 *   An <em>unordered</em> array with tags-objects, containing the attribute
 *   $tag->weight.
 */
function tagclouds_build_weighted_tags($tags, $steps = 6) {
  // Find minimum and maximum log-count. By our MatheMagician Steven Wittens aka
  // UnConeD.
  $tags_tmp = array();
  $min = 1e9;
  $max = -1e9;
  foreach ($tags as $id => $tag) {
    $tag->number_of_posts = $tag->count;
    $tag->weightcount = log($tag->count);
    $min = min($min, $tag->weightcount);
    $max = max($max, $tag->weightcount);
    $tags_tmp[$id] = $tag;
  }
  // Note: we need to ensure the range is slightly too large to make sure even
  // the largest element is rounded down.
  $range = max(.01, $max - $min) * 1.0001;
  foreach ($tags_tmp as $key => $value) {
    $tags[$key]->weight = 1 + floor($steps * ($value->weightcount - $min) / $range);
  }
  return $tags;
}

/**
 * API function to order a set of tags.
 *
 * $Sort = NULL, "title, asc", "title, desc", "count, asc", "count, desc"
 * @todo If you feel like making this more modular, please send me patches.
 */
function tagclouds_sort_tags($tags, $sort = NULL) {
  if ($sort == NULL) {
    $config = \Drupal::config('tagclouds.admin_page');
    $sort_order = $config->get('tagclouds_sort_order');
    if (empty($sort_order)) {
      $sort_order = 'title,asc';
    }
    list($sort, $order) = explode(',', $sort_order);
  }
  else {
    list($sort, $order) = explode(',', $sort);
  }

  switch ($sort) {
    case 'title':
      usort($tags, "_tagclouds_sort_by_title");
      break;

    case 'count':
      usort($tags, "_tagclouds_sort_by_count");
      break;

    case 'random':
      shuffle($tags);
      break;
  }
  if ($order == 'desc') {
    $tags = array_reverse($tags);
  }

  return $tags;
}

/**
 * Callback for usort, sort by count.
 */
function _tagclouds_sort_by_title($a, $b) {
  return strnatcasecmp($a->name, $b->name);
}

function _tagclouds_sort_by_count($a, $b) {
  return $a->count > $b->count;
}

/**
 * Theme function that renders the HTML for the tags.
 *
 * @ingroup themable
 */
function theme_tagclouds_weighted(array $vars) {
  $terms = $vars['terms'];

  $output = '';
  $config = \Drupal::config('tagclouds.admin_page');
  $display = $config->get('tagclouds_display_type');
  if (empty($display)) {
    $display = 'style';
  }

  if ($display=='style') {
    foreach ($terms as $term) {
      $term_name = $term->name;
      $term_desc = $term->description__value;
      
      if ($term->count==1 && $config->get("tagclouds_display_node_link")) {
        $output .= tagclouds_display_node_link_weight($term_name, $term->tid, $term->nid, $term->weight, $term_desc);
      }
      else {
        $output .= tagclouds_display_term_link_weight($term_name, $term->tid, $term->weight, $term_desc);
      }
    }
  }
  else {
    foreach ($terms as $term) {
      $term_name = $term->name;
      $term_desc = $term->description__value;
      if ($term->count==1 && $config->get("tagclouds_display_node_link")) {
        $output .= tagclouds_display_node_link_count($term_name, $term->tid, $term->nid, $term->count, $term_desc);
      }
      else {
        $output .= tagclouds_display_term_link_count($term_name, $term->tid, $term->count, $term_desc);
      }
    }
  }
  return $output;
}

function tagclouds_link($name, $url) {
  global $base_url;
  if(strpos($url, "://")==FALSE) {
    $url = $base_url . "/" . Drupal::service('path.alias_manager')->getAliasByPath($url);
  }
  return "<a href=\"$url\">$name</a>";
}

/**
 * Display Single Tag with Style
 */
function tagclouds_display_term_link_weight($name, $tid, $weight, $description) {
  if ($term = entity_load('taxonomy_term', $tid)) {
    $uri = $term->urlInfo();
    $options = $uri->getOptions();
    $options['options']['attributes']['class'][] = 'tagclouds';
    $options['options']['attributes']['class'][] = 'level' . $weight;
    $options['options']['attributes']['title'] = $description;
    return "<span class='tagclouds-term'>" . tagclouds_link($name, 'taxonomy/term/' . $tid, $options['options']) . "</span>\n";
  }
}

function tagclouds_display_node_link_weight($name, $tid, $nid, $weight, $description) {
  if ($term = entity_load('taxonomy_term', $tid) && $node = node_load($nid)) {
    $uri = $node->urlInfo();
    $options = $uri->getOptions();
    $options['options']['attributes']['class'][] = 'tagclouds';
    $options['options']['attributes']['class'][] = 'level' . $weight;
    $options['options']['attributes']['title'] = $description;
    return "<span class='tagclouds-term'>" . tagclouds_link($name, 'node/' . $nid, $options['options']) . "</span>\n";
  }
}

/**
 * Display Single Tag with Style
 */
function tagclouds_display_node_link_count($name, $tid, $nid, $count, $description) {
  if ($term = entity_load('taxonomy_term', $tid) && $node = node_load($nid)) {
    $uri = $node->urlInfo();
    $options = $uri->getOptions();
    $options['options']['attributes']['class'][] = 'tagclouds';
    $options['options']['attributes']['title'] = $description;
    return "<span class='tagclouds-term'>" . tagclouds_link($name, 'node/' . $nid, $options['options']) . " (" . $count . ")" . "</span>\n";
  }
}

function tagclouds_display_term_link_count($name, $tid, $count, $description) {
  if ($term = entity_load('taxonomy_term', $tid)) {
    $uri = $term->urlInfo();
    $options = $uri->getOptions();
    $options['options']['attributes']['class'][] = 'tagclouds';
    $options['options']['attributes']['title'] = $description;
    return "<span class='tagclouds-term'>" . tagclouds_link($name, 'taxonomy/term/' . $tid, $options['options']) . " (" . $count . ")" . "</span>\n";
  }
}

/**
 * Theme function that renders an entry in tagclouds/list/ views.
 *
 * @param $vocabulary
 *   A full vocabulary object.
 * @param $tags
 *   An array with weighted tag objects.
 * @ingroup themable
 */
function theme_tagclouds_list_box(array $vars) {
  $vocabulary = $vars['vocabulary'];
  $tags = $vars['tags'];

  $voc_name = $vocabulary->name;
  $voc_desc = $vocabulary->description;

  $content = theme_tagclouds_weighted(array('terms' => $tags));
  $output = '';
  if ($vocabulary->description) {
    $content = '<div>' . $voc_desc . '</div>' . $content;
  }
  $output .= '<h2>' . $voc_name . '</h2><div>' . $content . '</div>';

  return $output;
}

/**
 * Build block content.
 *
 * @param string $delta
 *   Current block id.
 * @param int $limit
 *   The number of tags to show in this block.
 *
 * @return sting
 *   Block content.
 */
function tagclouds_build_block_content($delta, $limit = 0) {
  $content = '';

  if ($voc = entity_load('taxonomy_vocabulary', $delta)) {
    $config = \Drupal::config('tagclouds.admin_page');
    $tags = tagclouds_get_tags(array($delta), $config->get('tagclouds_levels'), $limit);

    $tags = tagclouds_sort_tags($tags);
    
    $content = theme_tagclouds_weighted(array('terms'=>$tags));
    if (count($tags) >= $limit && $limit > 0) {
      $render = array(
        '#type' => 'more_link', 
        '#title' => t('more tags'), 
        '#url' => "tagclouds/chunk/{$voc->vid}"
      );
      $content .= drupal_render($render);
    }
  }

  return $content;
}

/**
 * Implements hook_theme().
 */
function tagclouds_theme() {
  return array(
    'tagclouds_list_box' => array('arguments' => array('vocabulary' => NULL, 'tags' => NULL)),
    'tagclouds_weighted' => array('arguments' => array('terms' => array()))
  );
}

/**
 * Implements hook_load()
 */
function tagclouds_vocs_load($ids) {
  return !empty($ids) ? explode(',', $ids) : array();
}

/**
 * Get localized term description unfiltered.
 * Adapted from i18n_taxonomy_term_name(). Should moved to i18n, issue http://drupal.org/node/1704658.
 */
function tagclouds_i18n_taxonomy_term_description($term, $langcode = NULL) {
  return i18n_taxonomy_vocabulary_mode($term->vid, I18N_MODE_LOCALIZE) ? i18n_string(array('taxonomy', 'term', $term->tid, 'description'), $term->description, array('langcode' => $langcode, 'sanitize' => FALSE)) : $term->description;
}

/**
 * Get localized vocabulary description.
 * Adapted from i18n_taxonomy_vocabulary_name(). Should moved to i18n, issue http://drupal.org/node/1704658.
 */
function tagclouds_i18n_taxonomy_vocabulary_description($vocabulary, $langcode = NULL) {
  return i18n_object_langcode($vocabulary) ? $vocabulary->description : i18n_string(array('taxonomy', 'vocabulary', $vocabulary->vid, 'description'), $vocabulary->description, array('langcode' => $langcode));
}
